import logging, re, asyncio
from datetime import datetime
from aiogram.utils import exceptions
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher

from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import sqlite3

API_TOKEN = '6552137964:AAGjuuGiXXVt1CTubNU4xGRfHDHjtQIu8_0'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        birth_date TEXT,
        phone_number TEXT,
        bank TEXT
    )
''')
conn.commit()


class RegisterStates(StatesGroup):
    name = State()
    birth_date = State()
    bank = State()
    phone_number = State()


banks_markup = ReplyKeyboardMarkup(resize_keyboard=True).add('C–±–µ—Ä–±–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ-–±–∞–Ω–∫', '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫')
main_markup = ReplyKeyboardMarkup(resize_keyboard=True).add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
phone_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True))


def insert_to_table(data, user_id):
    existing_user = cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()

    if existing_user:
        cursor.execute('''
            UPDATE users 
            SET username=?, birth_date=?, phone_number=?, bank=?
            WHERE user_id=?
        ''', (data['name'], data['birth_date'], data['phone_number'], data['bank'], user_id))
    else:
        cursor.execute('''
            INSERT INTO users (user_id, username, birth_date, phone_number, bank)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, data['name'], data['birth_date'], data['phone_number'], data['bank']))

    conn.commit()


def get_users_with_birthday():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    today = datetime.now().strftime("%d-%m")
    cursor.execute("SELECT * FROM users WHERE birth_date = ?", (today,))
    users = cursor.fetchall()
    conn.close()
    return users


def get_all_users():
    conn = sqlite3.connect('users.db')  # –ó–∞–º–µ–Ω–∏—Ç–µ 'your_database.db' –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    conn.close()
    return users


async def send_message_to_all_users(message_text):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    for user_id in users:
        user_id = user_id[0]  # user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä—Ç–µ–∂–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
        try:
            await bot.send_message(chat_id=user_id, text=message_text)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        except exceptions.TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–∂–º–∏ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                         reply_markup=main_markup)


@dp.message_handler(lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', state='*')
async def process_register(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await RegisterStates.name.set()


@dp.message_handler(state=RegisterStates.name)
async def process_name(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è.")
        return

    if len(message.text) < 15 and len(message.text) > 0:
        name = message.text
        await state.update_data(name=name)
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await RegisterStates.birth_date.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return


@dp.message_handler(state=RegisterStates.birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    banks_markup = ReplyKeyboardMarkup(resize_keyboard=True).add('C–±–µ—Ä–±–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ-–±–∞–Ω–∫').add('–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫')
    try:
        datetime.strptime(message.text, '%d.%m.%Y')
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    birth_date = message.text
    await state.update_data(birth_date=birth_date)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –±–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å", reply_markup=banks_markup)
    await RegisterStates.bank.set()


@dp.message_handler(state=RegisterStates.bank)
async def process_name_bank(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –±–∞–Ω–∫.")
        return

    bank = message.text
    await state.update_data(bank=bank)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=phone_markup)
    await RegisterStates.phone_number.set()


@dp.message_handler(state=RegisterStates.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentTypes.CONTACT:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text
        if not re.match("^\d{10,15}$", phone_number):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç +1234567890.")
            return


    await state.update_data(phone_number=phone_number)
    data = await state.get_data()
    insert_to_table(data, message.from_user.id)
    await state.finish()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.")
    await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start —Å–Ω–æ–≤–∞.", reply_markup=main_markup)


@dp.message_handler(content_types=types.ContentTypes.CONTACT, state=RegisterStates.phone_number)
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()
    insert_to_table(data, message.from_user.id)
    await state.finish()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.")
    await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start —Å–Ω–æ–≤–∞.", reply_markup=main_markup)


@dp.message_handler(commands=['gg'])
async def cmd_start(message: types.Message):
    await send_birthday_messages()


async def send_birthday_messages():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().strftime("%d.%m")
    print('today', today)
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = get_all_users()
    print('au', all_users)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    users_with_birthday = [user for user in all_users if user[2][:5] == today]
    print('uwb', users_with_birthday)


    for user in users_with_birthday:

        user_id = user[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = user[1]  # –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_phone_number = user[3]  # –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user_bank = user[4]  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞

        message_text = f"–°–µ–≥–æ–¥–Ω—è —É {user_name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ\n" \
                       f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–¥–∞—á–∏ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö! üéÇ\n" \
                       f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_phone_number}\n" \
                       f"–ë–∞–Ω–∫: {user_bank}"

        try:
            await send_message_to_all_users(message_text)
        except exceptions.BotBlocked:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        except exceptions.ChatNotFound:
            print(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except exceptions.RetryAfter as e:
            print(f"–ü–æ–ª—É—á–µ–Ω RetryAfter {e.timeout} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await asyncio.sleep(e.timeout)
            return await send_birthday_messages()
        except exceptions.UserDeactivated:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
        except exceptions.MessageIsTooLong:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")


async def scheduler():
    while True:
        now = datetime.now()
        if now.hour == 9 and now.minute == 0:
            await send_birthday_messages()
        await asyncio.sleep(60)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    from aiogram import executor

    logging.basicConfig(level=logging.INFO)

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
